import bcrypt from 'bcrypt';
import { CreateFrameworkDto } from '../../dtos/artemis/frameworks.dto';
import HttpException from '../../exceptions/HttpException';
import { Framework } from '../../interfaces/artemis/framework.interface';
import { isEmpty } from '../../utils/util';

class UserService {
    
  public async findAllFramework(): Promise<User[]> {
    const users: User[] = this.users;
    return users;
  }

  public async findFrameworkbyName(userId: number): Promise<User> {
    const findUser: User = this.users.find(user => user.id === userId);
    if (!findUser) throw new HttpException(409, "You're not user");

    return findUser;
  }

  public async createFramework(frameworkData: CreateUserDto): Promise<User> {
    if (isEmpty(userData)) throw new HttpException(400, "You're not userData");

    const findUser: User = this.users.find(user => user.email === userData.email);
    if (findUser) throw new HttpException(409, `You're email ${userData.email} already exists`);

    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const createUserData: User = { id: this.users.length + 1, ...userData, password: hashedPassword };

    return createUserData;
  }


}

export default UserService;
